#!/usr/bin/env glas.shepot

# glas.shepot "tries" each calls even if they are NULL pointed to.
#  I still haven't figured out what Glas interpreter should do 
#   though :D
#  think Objective-C calls :) 
# it's the same Glas, but "fragile" ;)

# Glas moto is: "SYNTAX ERROR? Mission impossible!"
# Glas means Voice in Bulgarian (and probably Russian: Glas-nost)
# Enjoy the syntax! Beat me to a translator :-)
# I am more and more thinking in Glas compatible language
#
#  (This should be the ultimate creationist file!)

# In the beginning God created the heaven and the earth. 
in: the beginning <- God ~ create: the heaven !and the earth


# And the earth was without form, and void; 
# and darkness was on the face of the deep. 

and: the earth !was without: form !and void

# And the Spirit of God moved on the face of the waters. 
and: the Spirit ->> God ~ move: on: face ->> waters

# And God said, Let there be light: and there was light. 
and: God ~ say: let: be ->> light <- was: light

# God saw that the light was good, and he separated the light from the darkness
God ~ saw: light ~ good -> was !and God ~ separate: the: (light, darkness)

# God called the light “day,” and the darkness he called “night.” 
and: Logos ~ alias: (light, "day"), (darkness, "night") -> God

And there was evening, and there was morning—the first day.
and: there ->> was ~ (evening, morning) =: the first day

# And God said, “Let there be a vault between the waters to separate water from water.” 
and: God ~ say: let: be -> vault !between waters =
    separate: water, water
    
# So God made the vault and separated the water under the vault from the water 
#  above it. And it was so. 

time ~ so: God ~ make: vault !and separate: water ...

# God called the vault “sky.” 
God~ alias: (vault, "sky") ->> Logos

And there was evening, and there was morning—the second day.
and: was: evening !and was: morning =: the second day.


# I am God thy lord

I ~ am ~ God -> thy: lord


{{ output statements}}
{{ output statements % 
  code to be executed (decorator as if) ? target io channel
}}
{> input statements % still figuring out what to do with them <}

{+ math statements, i need math opers for something else +}
{$ evaluate statements, eval()s $}
{@ shell statements, shell.eval()s :-) @}

you form names by whitespace # you_form_names_by_whitespace

you call with: * # you_call_with(*)

you "tail" a call with an object: * -> object
# you_tail_a_call_with_an_object(object, *)

you ~ can speak like: ->> yoda # if you will
#> you.yoda.can_speak_like()

you ~ can speak: like ->> yoda: "master" # if you will
#> you.yoda("master").can_speak(like)

you ~ can speak: like ->> "master" !yoda "if you will"
#> you.yoda("master","if you will").can_speak(like)

you ~ don't have: problems <- with these calls: "at all"
with_these_calls(you.dont_have(problems), "at all")

or even: these <<- calls "yes!"
#> or_even(calls("yes!", these))
or even: these <- calls: "... slight difference..."
#> calls(or_even("slight difference"))

# power to the people!
# power to expression!

power: to: the: people !
power(to(the(people))) !
power: to <- expression: !
# expression(power(to), !)

I ~ have: not: figured out: what to do: (with, "!")
# I.have(not(figured_out(what_to_do(with,"!"...

{{ "enjoy" }}
{{ \t, "this" }}
{{ \t * 2, "file!" }}

{> have you enjoyed it? <}
{{ "I hope {you} {have you enjoyed it}" % you = "rjh", have you enjoyed it = ? }}

